// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file forum.proto (package forum, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message forum.Msg
 */
export class Msg extends Message<Msg> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  constructor(data?: PartialMessage<Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "forum.Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Msg {
    return new Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Msg {
    return new Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Msg {
    return new Msg().fromJsonString(jsonString, options);
  }

  static equals(a: Msg | PlainMessage<Msg> | undefined, b: Msg | PlainMessage<Msg> | undefined): boolean {
    return proto3.util.equals(Msg, a, b);
  }
}

/**
 * @generated from message forum.Req
 */
export class Req extends Message<Req> {
  /**
   * @generated from field: string forum_id = 1;
   */
  forumId = "";

  constructor(data?: PartialMessage<Req>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "forum.Req";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forum_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Req {
    return new Req().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Req {
    return new Req().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Req {
    return new Req().fromJsonString(jsonString, options);
  }

  static equals(a: Req | PlainMessage<Req> | undefined, b: Req | PlainMessage<Req> | undefined): boolean {
    return proto3.util.equals(Req, a, b);
  }
}

/**
 * @generated from message forum.Forum
 */
export class Forum extends Message<Forum> {
  /**
   * @generated from field: string forum_id = 1;
   */
  forumId = "";

  /**
   * @generated from field: string subject_name = 2;
   */
  subjectName = "";

  /**
   * @generated from field: repeated forum.Msg post_data = 3;
   */
  postData: Msg[] = [];

  constructor(data?: PartialMessage<Forum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "forum.Forum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forum_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "post_data", kind: "message", T: Msg, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Forum {
    return new Forum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Forum {
    return new Forum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Forum {
    return new Forum().fromJsonString(jsonString, options);
  }

  static equals(a: Forum | PlainMessage<Forum> | undefined, b: Forum | PlainMessage<Forum> | undefined): boolean {
    return proto3.util.equals(Forum, a, b);
  }
}

/**
 * @generated from message forum.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "forum.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

